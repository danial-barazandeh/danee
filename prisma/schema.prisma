generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id             Int      @id @default(autoincrement())
  title          String
  content        String?
  seoTitle       String?
  seoDiscription String?
  seoKeys        String[]
  published      Boolean  @default(false)
  authorId       Int?
  author         User?    @relation(fields: [authorId], references: [id])
  imageId        Int?
  image          Image?   @relation(fields: [imageId], references: [id])
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
}

model User {
  id         Int       @id @default(autoincrement())
  firstName  String?
  familyName String?
  phone      String?
  imageId    Int?
  image      Image?    @relation(fields: [imageId], references: [id])
  role       Role      @default(USER)
  email      String?   @unique
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  posts      Post[]
  products   Product[]
  otps       Otp[]

  @@map("users")
}

model Product {
  id             Int       @id @default(autoincrement())
  title          String
  content        String?
  seoTitle       String?
  seoDiscription String?
  seoKeys        String[]
  published      Boolean   @default(false)
  authorId       Int?
  imageId        Int?
  image          Image?    @relation(fields: [imageId], references: [id])
  price          String
  salePrice      String?
  free           Boolean?
  time           String?
  author         User?     @relation(fields: [authorId], references: [id])
  introUrl       String?
  sections       Section[]
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
}

model Section {
  id        Int       @id @default(autoincrement())
  title     String
  productId Int?
  product   Product?  @relation(fields: [productId], references: [id])
  lectures  Lecture[]
}

model Lecture {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  sectionId Int
  content   String?
  section   Section? @relation(fields: [sectionId], references: [id])
}

model Image {
  id          Int       @id @default(autoincrement())
  url         String
  title       String
  description String
  posts       Post[]
  products    Product[]
  users       User[]
}

model Otp {
  id          Int    @id @default(autoincrement())
  password    String
  updatedAt   DateTime  @updatedAt @map("updated_at")
  userId      Int?
  user        User?  @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
